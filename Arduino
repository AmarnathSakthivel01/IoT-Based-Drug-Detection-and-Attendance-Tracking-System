#include <SPI.h>
#include <MFRC522.h>
#include <LiquidCrystal.h>

#define SS_PIN 10
#define RST_PIN 9
#define MQ2_SENSOR_PIN A1
#define MQ3_SENSOR_PIN A0
#define SMOKE_THRESHOLD 350 // Adjust threshold as needed
#define ALCOHOL_THRESHOLD 200 // Adjust threshold as needed

MFRC522 mfrc522(SS_PIN, RST_PIN);  
struct Student {
  const char* name;
  const char* rollNumber;
  byte UID[4]; 
};

const Student students[] PROGMEM = {
  {"amarnath", "EC20006", {0xE5, 0xC1, 0x91, 0xAC}},
  {"Hendry", "EC20024", {0x3D, 0x81, 0x0B, 0x32}}
};

const int rs = 8, en = 7, d4 = 6, d5 = 5, d6 = 4, d7 = 3;
LiquidCrystal lcd(rs, en, d4, d5, d6, d7);

const int led1Pin = A4; // Connect LED 1 to pin A4
const int led2Pin = A5; // Connect LED 2 to pin A5

void setup() {
  Serial.begin(9600);  
  SPI.begin();         
  mfrc522.PCD_Init();  
  lcd.begin(16, 2);    
  lcd.clear();         
  pinMode(led1Pin, OUTPUT); // Set LED 1 pin as output
  pinMode(led2Pin, OUTPUT); // Set LED 2 pin as output
}

void loop() {
  if (mfrc522.PICC_IsNewCardPresent()) {
    if (mfrc522.PICC_ReadCardSerial()) {
      
      dump_byte_array(mfrc522.uid.uidByte, mfrc522.uid.size);
      Serial.println();
      for (byte i = 0; i < sizeof(students) / sizeof(students[0]); i++) {
        Student student;
        memcpy_P(&student, &students[i], sizeof(student));
        if (compareUID(mfrc522.uid.uidByte, student.UID)) {
          lcd.clear();
          lcd.print("Name: ");
          lcd.print(student.name);
          lcd.setCursor(0, 1);
          lcd.print("Roll: ");
          lcd.print(student.rollNumber);
          delay(3000);
          int mq2Value = analogRead(MQ2_SENSOR_PIN);
          int mq3Value = analogRead(MQ3_SENSOR_PIN);
          Serial.print(" Alcohol: ");
          Serial.println(mq2Value);
          Serial.print(" Smoke: ");
          Serial.println(mq3Value);
          delay(1000);
          lcd.clear();
          lcd.print(" Alcohol: ");
          lcd.println(mq2Value);
          delay(3000);
          lcd.clear();
          lcd.print(" Smoke: ");
          lcd.println(mq3Value);
          delay(3000);
          
          // LED control based on sensor values
          if (mq2Value > ALCOHOL_THRESHOLD) {
            lcd.clear();
            lcd.print("student absent");
            delay(3000);
            analogWrite(led2Pin, 1023); // Turn on LED 2
            delay(15000); // Keep LED 2 on for 2 seconds
           
          }
          else{
            lcd.clear();
            lcd.print("student present");
            delay(3000);
          }

          if (mq3Value > SMOKE_THRESHOLD) {
            lcd.clear();
            lcd.print("student absent");
            delay(3000);
            analogWrite(led1Pin,1023); // Turn on LED 1
            delay(20000); // Keep LED 1 on for 2 seconds
          }
          else{
            lcd.clear();
            lcd.print("student present");
            delay(3000);
          }
          
          break;  
        }
      }
      mfrc522.PICC_HaltA();   
      mfrc522.PCD_StopCrypto1();
    }
  } else {
    lcd.clear();
    lcd.print(" DRUG DETECTION");
    lcd.setCursor(0, 1);
    lcd.print("No Card Detected");

    // Turn off both LEDs if no card detected
    digitalWrite(led1Pin, 0);
    digitalWrite(led2Pin, 0);
  }
}

bool compareUID(byte *UID1, byte *UID2) {
  for (byte i = 0; i < mfrc522.uid.size; i++) {
    if (UID1[i] != UID2[i]) {
      return false;  
    }
  }
  return true;  
}

void dump_byte_array(byte *buffer, byte bufferSize) {
  for (byte i = 0; i < bufferSize; i++) {
    Serial.print(buffer[i] < 0x10 ? " 0" : " ");
    Serial.print(buffer[i], HEX);
  }
}
